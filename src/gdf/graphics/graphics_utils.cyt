#
# graphics_utils.cyt - Код для создания очень быстрых функций (на уровне языка си) для работы с графикой.
#
# Этот код никак не используется ядром, пока не будет скомпилирован.
#
# Это код на Cython. Создаёт файл динамического импорта модуля после компиляции.
# Этот код нужен чтобы не использовать тяжёлый numba, который увеличивает скорость запуска и размер сборки на ~+30-35мб.
# Но при этом, код ниже даже быстрее, чем если использовать numba @njit.
#


# Импортируем:
import numpy as np
from OpenGL import GL as gl
from libc.math cimport sin, cos, pi


# Сверхбыстрая функция для поворота четырёх 2D вершин (для 2D прямоугольника), вокруг их общего центра:
cpdef list _rot2d_vertices_rectangle_(float x, float y, float width, float height, float angle):
    # Подготовка значений:
    cdef float center_x      =  x + (width  / 2.0)
    cdef float center_y      =  y + (height / 2.0)
    cdef float angle_rad     = -(angle * (pi / 180.0))
    cdef float angle_rad_sin =  sin(angle_rad)
    cdef float angle_rad_cos =  cos(angle_rad)

    # Предварительные смещения:
    cdef float dx1 = x - center_x
    cdef float dy1 = y - center_y
    cdef float dx2 = x + width  - center_x
    cdef float dy2 = y - center_y
    cdef float dx3 = x + width  - center_x
    cdef float dy3 = y + height - center_y
    cdef float dx4 = x - center_x
    cdef float dy4 = y + height - center_y

    # Вычисление координат вершин:
    cdef float x1 = dx1 * angle_rad_cos - dy1 * angle_rad_sin + center_x
    cdef float y1 = dx1 * angle_rad_sin + dy1 * angle_rad_cos + center_y
    cdef float x2 = dx2 * angle_rad_cos - dy2 * angle_rad_sin + center_x
    cdef float y2 = dx2 * angle_rad_sin + dy2 * angle_rad_cos + center_y
    cdef float x3 = dx3 * angle_rad_cos - dy3 * angle_rad_sin + center_x
    cdef float y3 = dx3 * angle_rad_sin + dy3 * angle_rad_cos + center_y
    cdef float x4 = dx4 * angle_rad_cos - dy4 * angle_rad_sin + center_x
    cdef float y4 = dx4 * angle_rad_sin + dy4 * angle_rad_cos + center_y

    # Возвращаем 4 вершины спрайта:
    return [x1, y1, x2, y2, x3, y3, x4, y4]


# Функция для конвертации списка квадратов в список треугольников:
cpdef list _convert_quads_to_triangles_(list vertices):
    cdef list new_vertices = []
    cdef int i

    for i in range(0, len(vertices), 8):
        new_vertices += [
            vertices[i+0], vertices[i+1],  # Нижний левый угол.
            vertices[i+2], vertices[i+3],  # Нижний правый угол.
            vertices[i+4], vertices[i+5],  # Верхний правый угол.
            vertices[i+4], vertices[i+5],  # Верхний правый угол.
            vertices[i+6], vertices[i+7],  # Верхный левый угол.
            vertices[i+0], vertices[i+1],  # Нижний левый угол.
        ]

    return new_vertices


# Отрисовка пакета 2D спрайтов:
cpdef _render_sprite_batch_2d_(dict texture_batches):
    cdef int texture
    cdef list vertices

    gl.glEnable(gl.GL_TEXTURE_2D)
    gl.glEnableClientState(gl.GL_VERTEX_ARRAY)
    gl.glEnableClientState(gl.GL_TEXTURE_COORD_ARRAY)

    # Пройдитесь по каждой текстуре и отрендерьте все квадраты с этой текстурой:
    for texture, vertices in texture_batches.items():
        gl.glBindTexture(gl.GL_TEXTURE_2D, texture)
        gl.glVertexPointer(2, gl.GL_FLOAT, 0, np.array(vertices, dtype=np.float32).data)
        gl.glTexCoordPointer(2, gl.GL_FLOAT, 0, np.tile([0, 1, 1, 1, 1, 0, 0, 0], len(vertices) // 8))
        gl.glDrawArrays(gl.GL_QUADS, 0, len(vertices) // 2)
    gl.glBindTexture(gl.GL_TEXTURE_2D, 0)

    gl.glDisableClientState(gl.GL_TEXTURE_COORD_ARRAY)
    gl.glDisableClientState(gl.GL_VERTEX_ARRAY)
    gl.glDisable(gl.GL_TEXTURE_2D)


# Отрисовка атласного пакета 2D спрайтов:
cpdef _render_atlas_texture_batch_2d_(dict texture_batches):
    cdef int texture
    cdef list vertices, texcoords

    gl.glEnable(gl.GL_TEXTURE_2D)
    gl.glEnableClientState(gl.GL_VERTEX_ARRAY)
    gl.glEnableClientState(gl.GL_TEXTURE_COORD_ARRAY)

    # Пройдитесь по каждой текстуре и отрендерьте все квадраты с этой текстурой:
    for texture, (vertices, texcoords) in texture_batches.items():
        gl.glBindTexture(gl.GL_TEXTURE_2D, texture)
        gl.glVertexPointer(2, gl.GL_FLOAT, 0, np.array(vertices, dtype=np.float32).data)
        gl.glTexCoordPointer(2, gl.GL_FLOAT, 0, np.array(texcoords))
        gl.glDrawArrays(gl.GL_QUADS, 0, len(vertices) // 2)
    gl.glBindTexture(gl.GL_TEXTURE_2D, 0)

    gl.glDisableClientState(gl.GL_TEXTURE_COORD_ARRAY)
    gl.glDisableClientState(gl.GL_VERTEX_ARRAY)
    gl.glDisable(gl.GL_TEXTURE_2D)
